#!/bin/python3

#       - Add another column in the csv file, if filled with 1, it's got surprise (round 0).??
# DONE: Allow adding creatures after start of combat (Summons)
# DONE: Allow rolls in prob
# DONE: Enable checks for prob bounds
# DONE: Handle advantage/disadvantage rolls
# DONE: Manage attack rolls
# DONE: Percentage chance of appearing
# DONE: Roll prob_threshold for every creature vs all at once?
# DONE: add colors
# DONE: allow comments in encounter files?
# DONE: allow mixed rolls: recursion (3d10+2d4+1) or (9+2)
# DONE: allow rolls in input file
# DONE: easier input of descriptive names: fzf/autocomplete/indexing etc
# DONE: if init=0, not playing
# DONE: input INITS in file instead of manual
# DONE: random roll
# DONE: show info on a floating graphical window instead, so it doesn't pollute terminal
# DONE: sort HP output by init order
# FIXME: Additional creatures of existing type will override the existing ones Add an offset variable. (Fix with OOP)
# TODO: allow subtraction and division (half of 3d6 damage) in rolls
### NOTE: Subtraction works if you write 1d10+-8
# TODO: parseargs: allow multiple enc files, roland-like wrapper
# TODO: refactor with OOP
# TODO: save/resume state?
# TODO: make -ve HP = 0 hp
# TODO: unclutter dead villains from displayed hp table
# TODO: Add conditions (show in table) (probably better to program with OOP)


# CONSIDER: Instead of constant prompts: just ask for a "command", after "who" is selected: arNdM -> attack roll with NdM, drNdM is damage roll.


# input player levels and numbers, look up XP
# input monster CR and numbers, look up multiplier and XP,
# Compare and output difficulty

## reads from an encounter file,
## format (CSV): <name>, <number of units>, <hps>, <inits> <OPTIONAL probability (<=100)>
## supports dice input for <number of units>, <hps> and <inits>
## Additionally, can read stats from file with filename == <name>
## Best to exec from same folder if stats included, no path handling provided.

import sys
import csv
from random import randint
from collections import OrderedDict
import tkinter
from rich import print
from rich.console import Console
from rich.table import Column, Table
from iterfzf import iterfzf

# def printee(*args, **kwargs):
#     message = " ".join(map(str,args))
#     sty = kwargs.get('sty', None)
#     console.print(message, style=sty)
#     with open("logfile.log", "a") as log:
#         log.write(message)

def roll(string):
    if string == '':
        return 0
    elif '+' in string:
        rollsum = 0
        splitstring = string.split('+')
        for item in splitstring:
            rollsum = rollsum + roll(item.strip())
        return rollsum
    else:
        try:
            if(string[0] == 'a'):
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return max(r1, r2)
            elif(string[0] == 'z'):
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return min(r1, r2)
            else:
                return roll_nds(string)
        except:
            print("Something is wrong. Rolling 0.")
            return 0

def roll_nds(string):
    if 'd' in string:
        try:
            n = int(string.split('d')[0])
        except:
            n = 1
        s = int(string.split('d')[1])
        rolls = [ randint(1,s) for i in range(n)]
        return (sum(rolls))
    else:
        try:
            return int(string)
        except:
            return 0


def read_hps():
    with open(sys.argv[1], mode='r') as infile:
        reader = csv.reader(infile)
        for rows in reader:
            basename = rows[0].strip()
            if basename[0] != "#":
                num = nums[basename]
                for i in range(num):
                    suffix = str(i+1)
                    if num == 1:
                        suffix = ''
                    try:
                        name = rows[0].strip() + suffix
                        if name[0] != "#":
                            hp = roll(rows[2].strip())
                            init = roll(rows[3].strip())
                            inf = read_info(rows[0].strip())
                            hps.update({name : hp})
                            inits.update({name : init})
                            info.update({name: inf})
                    except:
                        print("Error reading encounter (csv) file")
                        sys.exit()


def read_info(filename):
    if filename == '':
        return ''
    try:
        infile = open(filename, "r")
        out = infile.read()
        infile.close()
        return out
    except:
        return ''


def read_nums():
    with open(sys.argv[1], mode='r') as infile:
        reader = csv.reader(infile)
        for rows in reader:
            name = rows[0].strip()
            if name[0] != "#":
                initval = rows[3].strip()
                if rows[1].strip() != '':
                    num=rows[1].strip()
                else:
                    num = '1'
                try:
                    prob = roll(rows[4].strip())
                except:
                    prob = 100
                if prob > 100 or prob < 1:
                    prob = 0
                prob_threshold = roll("d100")
                if(prob > prob_threshold):
                    value = roll(num)
                else:
                    value = 0
                nums.update({name : value})
                if initval != '0' and value > 0 and prob > prob_threshold:
                    print("Spawned", nums[name], name+"s")

def add_creature(basename):
    if basename.strip() == '':
        return
    print("Adding ", basename)
    num = roll(input("Number: ").strip())
    hpstr= input("HP: ").strip()
    initstr = input("Init: ").strip()

    for i in range(num):
        suffix = str(i+1)
        if num == 1:
            suffix = ''
        name = basename + suffix
        hp = roll(hpstr)
        init = roll(initstr)
        inf = read_info(basename)
        hps.update({name : hp})
        inits.update({name : init})
        info.update({name: inf})

def print_info_gui(attacker, defender):
    infostring = attacker + '\n\n------------\n\n' + defender
    for widget in frame.winfo_children():
        widget.destroy()
    frame.pack_forget()
    frame.grid_forget()
    frame.pack()
    lab = tkinter.Label(frame,text=infostring, anchor="w", width=200, justify="left")
    lab.config(font=("Cascadia Code", 16))
    lab.pack(fill='both')

def print_rich_table():
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Name")
    table.add_column("HP")
    for key in inits:
        if hps[key] > 0:
            table.add_row( key, str(hps[key]))
    console.print(table)


console = Console()
console.print("Welcome to the DND Encounter Handler", style="bold red")
# printee("Welcome to the DND Encounter Handler", sty="bold red")

inits={}
hps = {}
nums={}
probs={}
info={}
read_nums()
read_hps()

## Remove 0-valued inits
inits = {x:y for x,y in inits.items() if y!=0}
hps = {x:y for x,y in hps.items() if x in inits.keys()}
probs = {x:y for x,y in probs.items() if x in inits.keys()}


root = tkinter.Tk()
frame = tkinter.Frame(root, width=1000, height=300)
frame.pack()
lab = tkinter.Label(frame,text="Awaiting start of combat!")
lab.config(font=("Cascadia Code", 20))
lab.pack()

iround=0
while 1:
    if len(inits.keys()) < 1:
        print("No Encounter!")
        break

    add_creature(input("Additional Creatures: ").strip())

    inits = OrderedDict(sorted(inits.items(), key=lambda kv: kv[1], reverse=True))
    print_rich_table()


    iround= iround+1
    turn=0
    for attacker in inits.keys():
        if attacker not in hps.keys():
            continue
        turn = turn + 1
        print("\n=== ROUND [" , iround , "] TURN [" , turn , "]: " + attacker + " ===")

        iattack=1
        print_info_gui(info[attacker], "")

        print('[bold green] whom to attack [/bold green] [', iattack, ']: ', end='')

        who = input().strip()
        if who != '':
            who=iterfzf(inits, prompt = "== " + str(attacker) + "[" + str(iattack) + "]" + " == ", query=who)

        print("Attacking ", who)

        while (who != None) and (who != ''):
            if(who in hps.keys()):
                print_info_gui(info[attacker], info[who])
                print("You rolled", roll(input("roll for ATK: ")))
                dmg = roll(input("roll for DMG: "))
                console.print("Doing " , dmg , " damage to " , who, style='bold yellow')
                hps.update({who:hps[who] - dmg})
                print_rich_table()
                if hps[who] <= 0:
                    hps[who] = 0
                    console.print(who, "is dead!", style="bold red")
                iattack = iattack + 1
                print('[bold green] whom to attack [/bold green] [', iattack, ']: ', end='')
                who = input().strip()
                if who != '':
                    who=iterfzf(inits, prompt = "== " + str(attacker) + "[" + str(iattack) + "]" + " == ", query=who)
            # else:
            #     print("No target found!")
            #     print('[bold green] whom to attack [/bold green] [', iattack, ']: ', end='')
            #     input().strip()
            #     who = iterfzf(inits)

    print('\n===========================')
    print("=== End of Round [" , iround , "] ===")
    print('===========================')
