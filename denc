#!/bin/python3

# DONE: random roll
# TODO: input: multiple files with all stats?, fzf-preview with stats while encounter progresses.
# TODO: if init=0, not playing
# TODO: the prob with fzf-selection is that it's fullscreen. maybe use preview to show updates?
# TODO: Cache file
# TODO: allow rolls in input file
# TODO: fzf-select, exit

## reads from an encounter file, the names and hps in csv format
## Uses it to prompt for initiative rolls

from collections import OrderedDict
# import random
import sys
import csv
import json
from random import randint
from iterfzf import iterfzf

def roll(string):
    if 'd' in string:
        if '+' in string:
            add = int(string.split('+')[1])
            string = dmgstring.split('+')[0]
        else:
            add=0
        n = int(string.split('d')[0])
        s = int(string.split('d')[1])
        rolls = [ randint(1,s) ] * n
        return (sum(rolls) + add)
    else:
        return int(string)

def pre(inits, hps):
    num = input('How many characters? ')
    print()
    for n in range(int(num)):
        name=input('Name:')
        init=int(input('init:'))
        hp=int(input('hp:'))
        inits.update({name:init})
        hps.update({name:hp})
        print()

def read_inits(inits, hps):
    for key in hps.keys():
        init=int(input('init ('+key+'):'))
        inits.update({key:init})

def read_hps(hps):
    with open(sys.argv[1], mode='r') as infile:
        reader = csv.reader(infile)
        for rows in reader:
            hps.update({rows[0]:int(rows[1])})
            info.update({rows[0]:rows[2]})

inits={}
hps = {}
info={}
# pre(inits, hps)
read_hps(hps)
read_inits(inits, hps)

iround=0
while 1:
    inits = OrderedDict(sorted(inits.items(), key=lambda kv: kv[1], reverse=True))
    iround= iround+1
    turn=0
    for attacker in inits.keys():
        if attacker not in hps.keys():
            continue
        turn = turn + 1
        print("\n=== ROUND [" + str(iround) + "] TURN [" + str(turn) + "]: " + attacker + " ===")
        # who=input('whom to attack: ')
        # who = iterfzf(hps, prompt="\n=== TURN [" + str(turn) + "]: " + attacker + " ===")
        out = iterfzf(hps, prompt=("\n=== ROUND [" + str(iround) + "] TURN [" + str(turn) + "]: " + attacker + " ==="), print_query=True)
        if out[1] is None and out[0] == 'quit':
            sys.exit()
        who=out[1]
        print("Attacking ", who)
        # while (who != "-"):
        while (who != None ):
            if(who in hps.keys()):
                print(info[attacker])
                dmgstring = input("dmg: ")
                dmg = roll(dmgstring)
                print("Doing " , dmg , " damage to " , who)
                hps.update({who:hps[who] - dmg})
                for key, value in hps.items():
                    print("\t\t\t\t" + key + ": " + str(value))
                if hps[who] <= 0:
                    print(who + " is dead!!")
                    # del hps[who]
            # who=input('whom to attack: ')
            out = iterfzf(hps, prompt=("\n=== ROUND [" + str(iround) + "] TURN [" + str(turn) + "]: " + attacker + " ==="), print_query=True)
            # if out[1] is None and out[0] == 'quit':
            #     break
            who=out[1]
